unit ServerMethodsUnit;

interface

uses
  System.SysUtils, System.Classes, Datasnap.DSServer, 
  Datasnap.DSAuth, Datasnap.DSProviderDataModuleAdapter, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.PG, FireDAC.Phys.PGDef, FireDAC.VCLUI.Wait, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Datasnap.Provider, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TDSServerModule1 = class(TDSServerModule)
    PgtaxiConnection: TFDConnection;
    DriverTable: TFDQuery;
    RideTable: TFDQuery;
    RideArchiveTable: TFDQuery;
    DriverDSP: TDataSetProvider;
    RideDSP: TDataSetProvider;
    RideArchiveDSP: TDataSetProvider;
    RideStatusTable: TFDQuery;
    DriverStatusTable: TFDQuery;
    RideStatusDSP: TDataSetProvider;
    DriverStatusDSP: TDataSetProvider;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure MoveRideToArchive(RideId : integer);
    procedure UpdateRide(RideId : integer; DriverId : integer; StatusId : integer; requirement : string; address : string);
    procedure CreateNewRide(RideId : integer);
  end;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}


procedure TDSServerModule1.MoveRideToArchive(RideId : integer);
var query : TFDQuery;
begin
  query := TFDQuery.Create(nil);
  query.Connection := PgtaxiConnection;

  query.SQL.Add('CALL public."prcMoveRideToArchive"(:ride_id);');
  query.Params[0].Value := RideId;
  query.ExecSQL;
end;


procedure TDSServerModule1.UpdateRide(RideId : integer; DriverId : integer; StatusId : integer; requirement : string; address : string);
var query : TFDQuery;
begin
  query := TFDQuery.Create(nil);
  query.Connection := PgtaxiConnection;

  query.SQL.Add('CALL public."prcUpdateRide"(:ride_id, :driver_id, :status_id, :requirement, :address);');
  query.Params[0].Value := RideId;
  query.Params[1].Value := DriverId;
  query.Params[2].Value := StatusId;
  query.Params[3].Value := requirement;
  query.Params[4].Value := address;

  query.ExecSQL;
end;



end.

